R = rowMeans(R),
n.hy.mal = rowMeans(n.hy.mal),
n.ahy.mal = rowMeans(n.ahy.mal),
n.hy.fem = rowMeans(n.hy.fem),
n.ahy.fem = rowMeans(n.ahy.fem))
# mu_SH_am <- rowMeans(SH.am)
# mu_SN_am <- rowMeans(SN.am)
# mu_SH_af <- rowMeans(SH.af)
# mu_SN_af <- rowMeans(SN.af)
# mu_SH_jm <- rowMeans(SH.jm)
# mu_SN_jm <- rowMeans(SN.jm)
# mu_SH_jf <- rowMeans(SH.jf)
# mu_SN_jf <- rowMeans(SN.jf)
# mu_R <- rowMeans(R)
# mu_n_hy_mal <- rowMeans(n.hy.mal)
# mu_n_ahy_mal <- rowMeans(n.ahy.mal)
# mu_n_hy_fem <- rowMeans(n.hy.fem)
# mu_n_ahy_fem <- rowMeans(n.ahy.fem)
# sens <- matrix(NA, n.draws, 13)
# colnames(sens) <- c("SH.am", "SN.am", "SH.af", "SN.af", "SH.jm", "SN.jm", "SH.jf", "SN.jf", "R", "N_HY_fem", "N_AHY_fem", "N_HY_mal", "N_AHY_mal")
sens_SH_am <- eval(D(lambda, "SH.am"), envir=mu)
sens_SN_am <- eval(D(lambda, "SN.am"), envir=mu)
sens_SH_af <- eval(D(lambda, "SH.af"), envir=mu)
sens_SN_af <- eval(D(lambda, "SN.af"), envir=mu)
sens_SH_jm <- eval(D(lambda, "SH.jm"), envir=mu)
sens_SN_jm <- eval(D(lambda, "SN.jm"), envir=mu)
sens_SH_jf <- eval(D(lambda, "SH.jf"), envir=mu)
sens_SN_jf <- eval(D(lambda, "SN.jf"), envir=mu)
sens_R <- eval(D(lambda, "R"), envir=mu)
sens_N_HY_fem <- eval(D(lambda, "n.hy.fem"), envir=mu)
sens_N_AHY_fem <- eval(D(lambda, "n.ahy.fem"), envir=mu)
sens_N_HY_mal <- eval(D(lambda, "n.hy.mal"), envir=mu)
sens_N_AHY_mal<- eval(D(lambda, "n.ahy.mal"), envir=mu)
#
# for (j in 1:samples){
#    sens_R[j] <- (((mu_n_hy_fem[j] + mu_n_ahy_fem[j]) * mu_SH_jm[j] * (mu_SN_jm[j]^0.25) + (mu_n_hy_fem[j] + mu_n_ahy_fem[j]) * mu_SH_jf[j] * (mu_SN_jf[j]^0.25))/(mu_n_hy_fem[j] + mu_n_ahy_fem[j] + mu_n_hy_mal[j] + mu_n_ahy_mal[j]))
# sens_F2[j] <- (0.5*mu_Sfj[j]*mu_nf2[j])
# sens_Sfj[j] <- (0.5*mu_F1[j]*mu_nf1[j]+0.5*mu_F2[j]*mu_nf2[j])
# sens_Sfa[j] <- 1
# sens_nf1[j] <- (0.5*mu_F1[j]*mu_Sfj[j]+mu_Sfa[j]) -
#   (0.5*mu_Sfj[j]*(mu_F1[j]*mu_nf1[j]+mu_F2[j]*mu_nf2[j])+mu_Sfa[j])
# sens_nf2[j] <- (0.5*mu_F2[j]*mu_Sfj[j]+mu_Sfa[j]) -
#   (0.5*mu_Sfj[j]*(mu_F1[j]*mu_nf1[j]+mu_F2[j]*mu_nf2[j])+mu_Sfa[j])
#}
# Step 4: Calculate the LTRE contributions of temporal process (co)variation # in the demographic parameters to temporal variation in the realized population growth rates.
cont_SH_am <- cont_SN_am <- cont_SH_af <-cont_SN_af <- cont_SH_jm <- cont_SN_jm <- cont_SH_jf <- cont_SN_jf <- cont_R <-cont_N_HY_mal <-cont_N_AHY_mal <-cont_N_HY_fem <-cont_N_AHY_fem <- matrix(0,samples,1)
for (j in 1:samples){
dp_stoch <- cbind(SH.am[j,],SN.am[j,],SH.af[j,],SN.af[j,], SH.jm[j,], SN.jm[j,], SH.jf[j,], SN.jf[j,], R[j,],n.hy.fem[j,],n.ahy.fem[j,],n.hy.mal[j,], n.ahy.mal[j,])
# Derive process variance and covariance among demographic parameters using
# 'shrinkage' estimates of vital rates and proportionate abundances:
dp_varcov <- var(dp_stoch)
sensvec <- c(sens_SH_am[j], sens_SN_am[j], sens_SH_af[j], sens_SN_af[j], sens_SH_jm[j], sens_SN_jm [j], sens_SH_jf[j], sens_SN_jf[j], sens_R[j], sens_N_HY_fem[j], sens_N_AHY_fem[j], sens_N_HY_mal[j], sens_N_AHY_mal[j])
# calculate demographic contributions
contmatrix <- matrix(0,13,13)
for (k in 1:13){
for (m in 1:13){
contmatrix <- dp_varcov*sensvec[k]*sensvec[m]
}
}
contributions <- rowSums(contmatrix)
cont_SH_am[j] <- contributions[1]
cont_SN_am[j] <- contributions[2]
cont_SH_af[j] <- contributions[3]
cont_SN_af[j] <- contributions[4]
cont_SH_jm[j] <- contributions[5]
cont_SN_jm[j] <- contributions[6]
cont_SH_jf[j] <- contributions[7]
cont_SN_jf[j] <- contributions[8]
cont_R[j] <- contributions[9]
cont_N_HY_fem[j] <- contributions[10]
cont_N_AHY_fem[j] <- contributions[11]
cont_N_HY_mal[j] <- contributions[12]
cont_N_AHY_mal[j] <- contributions[13]
}
# Step 5: Calculate desired statistics (e.g. the mean and Bayesian credible  # interval) from the derived posterior distributions of the LTRE contributions. The following is an example for the total contribution from all demographic parameters.
totalcont <- cont_SH_am + cont_SN_am + cont_SH_af + cont_SN_af + cont_SH_jm + cont_SN_jm + cont_SH_jf + cont_SN_jf + cont_R + cont_N_HY_mal + cont_N_AHY_mal + cont_N_HY_fem + cont_N_AHY_fem
mean(totalcont)
quantile(totalcont,0.05)
quantile(totalcont,0.95)
cont.means <- c(mean(cont_SH_am), mean(cont_SN_am), mean(cont_SH_af), mean(cont_SN_af), mean(cont_SH_jm), mean(cont_SN_jm), mean(cont_SH_jf), mean(cont_SN_jf), mean(cont_R), mean(cont_N_HY_fem), mean(cont_N_AHY_fem), mean(cont_N_HY_mal), mean(cont_N_AHY_mal))
cont.lower<- c(quantile(cont_SH_am, 0.05), quantile(cont_SN_am, 0.05), quantile(cont_SH_af, 0.05), quantile(cont_SN_af, 0.05), quantile(cont_SH_jm, 0.05), quantile(cont_SN_jm, 0.05), quantile(cont_SH_jf, 0.05), quantile(cont_SN_jf, 0.05), quantile(cont_R, 0.05), quantile(cont_N_HY_fem, 0.05), quantile(cont_N_AHY_fem, 0.05), quantile(cont_N_HY_mal, 0.05), quantile(cont_N_AHY_mal, 0.05))
cont.upper <- c(quantile(cont_SH_am, 0.95), quantile(cont_SN_am, 0.95), quantile(cont_SH_af, 0.95), quantile(cont_SN_af, 0.95), quantile(cont_SH_jm, 0.95), quantile(cont_SN_jm, 0.95), quantile(cont_SH_jf, 0.95), quantile(cont_SN_jf, 0.95), quantile(cont_R, 0.95), quantile(cont_N_HY_fem, 0.95), quantile(cont_N_AHY_fem, 0.95), quantile(cont_N_HY_mal, 0.95), quantile(cont_N_AHY_mal, 0.95))
cont.table <- as.data.frame(cbind(Parameter = c("S_FW_AM", "S_SS_AM", "S_FW_AF", "S_SS_AF", "S_FW_JM", "S_SS_JM", "S_FW_JF", "S_SS_JF", "Productivity", "Proportion_JF", "Proportion_AF", "Proportion_JM", "Proportion_AM"), Contribution = as.numeric(cont.means), Lower = as.numeric(cont.lower), Upper = as.numeric(cont.upper)))
cont.table <- cont.table %>%
mutate_at(c('Contribution', "Lower", "Upper"), as.numeric)
return(cont.table)
}
ggplot(corr.dat) +
geom_pointrange(aes(x = Param, y = Mean, ymin = Lower, ymax = Upper))
# Turn tLTRE into a function
tltre.fun <- function(ipm){
# # Calculate proportional population sizes
n.years <- ncol(ipm$sims.list$SH.am)
samples <- nrow(ipm$sims.list$SH.am)
draws <- ipm$sims.list # Dig out MCMC samples
SH.am <- ipm$sims.list$SH.am
SN.am <- ipm$sims.list$SN.am
SH.af <- ipm$sims.list$SH.af
SN.af <- ipm$sims.list$SN.af
SH.jm <- ipm$sims.list$SH.jm
SN.jm <- ipm$sims.list$SN.jm
SH.jf <- ipm$sims.list$SH.jf
SN.jf <- ipm$sims.list$SN.jf
R <- ipm$sims.list$R
R <- R[, 1:15]
N_HY_mal <- ipm$sims.list$N_HY_mal
N_AHY_mal <- ipm$sims.list$N_AHY_mal
N_HY_fem <- ipm$sims.list$N_HY_fem
N_AHY_fem <- ipm$sims.list$N_AHY_fem
lam <- ipm$sims.list$lambda
tempvar_lam <- rowVars(lam)
mean(tempvar_lam)
quantile(tempvar_lam,0.05)
quantile(tempvar_lam,0.95)
lambda <- expression(((n.hy.fem + n.ahy.fem)*R*SH.jm*(SN.jm^0.25) + (n.hy.fem + n.ahy.fem)*R*SH.jf*(SN.jf^0.25) + (n.hy.mal + n.ahy.mal)*SH.am*SN.am + (n.hy.fem + n.ahy.fem)*SH.af*SN.af)/(n.hy.fem + n.ahy.fem + n.hy.mal + n.ahy.mal))
D(lambda, "R")
# Step 2: Calculate stage-specific proportions of abundances for each sex-age class at each time step and for each of the saved MCMC samples.
n.hy.mal <- draws$N_HY_mal[, 1:n.years] / draws$N_tot[, 1:n.years]
n.ahy.mal <- draws$N_AHY_mal[, 1:n.years] / draws$N_tot[, 1:n.years]
n.hy.fem <- draws$N_HY_fem[, 1:n.years] / draws$N_tot[, 1:n.years]
n.ahy.fem <- draws$N_AHY_fem[, 1:n.years] / draws$N_tot[, 1:n.years]
# Step 3: Calculate the transient sensitivities for each demographic parameter, evaluated at temporal means of each parameter.
sens_SH_am <- sens_SN_am <- sens_SH_af <-sens_SN_af <- sens_SH_jm <- sens_SN_jm <- sens_SH_jf <- sens_SN_jf <- sens_R <-sens_n_hy_mal <-sens_n_ahy_mal <-sens_n_hy_fem <-sens_n_ahy_fem <- matrix(0,samples,1)
mu <- list(SH.am = rowMeans(SH.am),
SN.am = rowMeans(SN.am),
SH.af = rowMeans(SH.af),
SN.af = rowMeans(SN.af),
SH.jm = rowMeans(SH.jm),
SN.jm = rowMeans(SN.jm),
SH.jf = rowMeans(SH.jf),
SN.jf = rowMeans(SN.jf),
R = rowMeans(R),
n.hy.mal = rowMeans(n.hy.mal),
n.ahy.mal = rowMeans(n.ahy.mal),
n.hy.fem = rowMeans(n.hy.fem),
n.ahy.fem = rowMeans(n.ahy.fem))
# mu_SH_am <- rowMeans(SH.am)
# mu_SN_am <- rowMeans(SN.am)
# mu_SH_af <- rowMeans(SH.af)
# mu_SN_af <- rowMeans(SN.af)
# mu_SH_jm <- rowMeans(SH.jm)
# mu_SN_jm <- rowMeans(SN.jm)
# mu_SH_jf <- rowMeans(SH.jf)
# mu_SN_jf <- rowMeans(SN.jf)
# mu_R <- rowMeans(R)
# mu_n_hy_mal <- rowMeans(n.hy.mal)
# mu_n_ahy_mal <- rowMeans(n.ahy.mal)
# mu_n_hy_fem <- rowMeans(n.hy.fem)
# mu_n_ahy_fem <- rowMeans(n.ahy.fem)
# sens <- matrix(NA, n.draws, 13)
# colnames(sens) <- c("SH.am", "SN.am", "SH.af", "SN.af", "SH.jm", "SN.jm", "SH.jf", "SN.jf", "R", "N_HY_fem", "N_AHY_fem", "N_HY_mal", "N_AHY_mal")
sens_SH_am <- eval(D(lambda, "SH.am"), envir=mu)
sens_SN_am <- eval(D(lambda, "SN.am"), envir=mu)
sens_SH_af <- eval(D(lambda, "SH.af"), envir=mu)
sens_SN_af <- eval(D(lambda, "SN.af"), envir=mu)
sens_SH_jm <- eval(D(lambda, "SH.jm"), envir=mu)
sens_SN_jm <- eval(D(lambda, "SN.jm"), envir=mu)
sens_SH_jf <- eval(D(lambda, "SH.jf"), envir=mu)
sens_SN_jf <- eval(D(lambda, "SN.jf"), envir=mu)
sens_R <- eval(D(lambda, "R"), envir=mu)
sens_N_HY_fem <- eval(D(lambda, "n.hy.fem"), envir=mu)
sens_N_AHY_fem <- eval(D(lambda, "n.ahy.fem"), envir=mu)
sens_N_HY_mal <- eval(D(lambda, "n.hy.mal"), envir=mu)
sens_N_AHY_mal<- eval(D(lambda, "n.ahy.mal"), envir=mu)
#
# for (j in 1:samples){
#    sens_R[j] <- (((mu_n_hy_fem[j] + mu_n_ahy_fem[j]) * mu_SH_jm[j] * (mu_SN_jm[j]^0.25) + (mu_n_hy_fem[j] + mu_n_ahy_fem[j]) * mu_SH_jf[j] * (mu_SN_jf[j]^0.25))/(mu_n_hy_fem[j] + mu_n_ahy_fem[j] + mu_n_hy_mal[j] + mu_n_ahy_mal[j]))
# sens_F2[j] <- (0.5*mu_Sfj[j]*mu_nf2[j])
# sens_Sfj[j] <- (0.5*mu_F1[j]*mu_nf1[j]+0.5*mu_F2[j]*mu_nf2[j])
# sens_Sfa[j] <- 1
# sens_nf1[j] <- (0.5*mu_F1[j]*mu_Sfj[j]+mu_Sfa[j]) -
#   (0.5*mu_Sfj[j]*(mu_F1[j]*mu_nf1[j]+mu_F2[j]*mu_nf2[j])+mu_Sfa[j])
# sens_nf2[j] <- (0.5*mu_F2[j]*mu_Sfj[j]+mu_Sfa[j]) -
#   (0.5*mu_Sfj[j]*(mu_F1[j]*mu_nf1[j]+mu_F2[j]*mu_nf2[j])+mu_Sfa[j])
#}
# Step 4: Calculate the LTRE contributions of temporal process (co)variation # in the demographic parameters to temporal variation in the realized population growth rates.
cont_SH_am <- cont_SN_am <- cont_SH_af <-cont_SN_af <- cont_SH_jm <- cont_SN_jm <- cont_SH_jf <- cont_SN_jf <- cont_R <-cont_N_HY_mal <-cont_N_AHY_mal <-cont_N_HY_fem <-cont_N_AHY_fem <- matrix(0,samples,1)
for (j in 1:samples){
dp_stoch <- cbind(SH.am[j,],SN.am[j,],SH.af[j,],SN.af[j,], SH.jm[j,], SN.jm[j,], SH.jf[j,], SN.jf[j,], R[j,],n.hy.fem[j,],n.ahy.fem[j,],n.hy.mal[j,], n.ahy.mal[j,])
# Derive process variance and covariance among demographic parameters using
# 'shrinkage' estimates of vital rates and proportionate abundances:
dp_varcov <- var(dp_stoch)
sensvec <- c(sens_SH_am[j], sens_SN_am[j], sens_SH_af[j], sens_SN_af[j], sens_SH_jm[j], sens_SN_jm [j], sens_SH_jf[j], sens_SN_jf[j], sens_R[j], sens_N_HY_fem[j], sens_N_AHY_fem[j], sens_N_HY_mal[j], sens_N_AHY_mal[j])
# calculate demographic contributions
contmatrix <- matrix(0,13,13)
for (k in 1:13){
for (m in 1:13){
contmatrix <- dp_varcov*sensvec[k]*sensvec[m]
}
}
contributions <- rowSums(contmatrix)
cont_SH_am[j] <- contributions[1]
cont_SN_am[j] <- contributions[2]
cont_SH_af[j] <- contributions[3]
cont_SN_af[j] <- contributions[4]
cont_SH_jm[j] <- contributions[5]
cont_SN_jm[j] <- contributions[6]
cont_SH_jf[j] <- contributions[7]
cont_SN_jf[j] <- contributions[8]
cont_R[j] <- contributions[9]
cont_N_HY_fem[j] <- contributions[10]
cont_N_AHY_fem[j] <- contributions[11]
cont_N_HY_mal[j] <- contributions[12]
cont_N_AHY_mal[j] <- contributions[13]
}
# Step 5: Calculate desired statistics (e.g. the mean and Bayesian credible  # interval) from the derived posterior distributions of the LTRE contributions. The following is an example for the total contribution from all demographic parameters.
totalcont <- cont_SH_am + cont_SN_am + cont_SH_af + cont_SN_af + cont_SH_jm + cont_SN_jm + cont_SH_jf + cont_SN_jf + cont_R + cont_N_HY_mal + cont_N_AHY_mal + cont_N_HY_fem + cont_N_AHY_fem
mean(totalcont)
quantile(totalcont,0.05)
quantile(totalcont,0.95)
cont.means <- c(mean(cont_SH_am), mean(cont_SN_am), mean(cont_SH_af), mean(cont_SN_af), mean(cont_SH_jm), mean(cont_SN_jm), mean(cont_SH_jf), mean(cont_SN_jf), mean(cont_R), mean(cont_N_HY_fem), mean(cont_N_AHY_fem), mean(cont_N_HY_mal), mean(cont_N_AHY_mal))
cont.lower<- c(quantile(cont_SH_am, 0.05), quantile(cont_SN_am, 0.05), quantile(cont_SH_af, 0.05), quantile(cont_SN_af, 0.05), quantile(cont_SH_jm, 0.05), quantile(cont_SN_jm, 0.05), quantile(cont_SH_jf, 0.05), quantile(cont_SN_jf, 0.05), quantile(cont_R, 0.05), quantile(cont_N_HY_fem, 0.05), quantile(cont_N_AHY_fem, 0.05), quantile(cont_N_HY_mal, 0.05), quantile(cont_N_AHY_mal, 0.05))
cont.upper <- c(quantile(cont_SH_am, 0.95), quantile(cont_SN_am, 0.95), quantile(cont_SH_af, 0.95), quantile(cont_SN_af, 0.95), quantile(cont_SH_jm, 0.95), quantile(cont_SN_jm, 0.95), quantile(cont_SH_jf, 0.95), quantile(cont_SN_jf, 0.95), quantile(cont_R, 0.95), quantile(cont_N_HY_fem, 0.95), quantile(cont_N_AHY_fem, 0.95), quantile(cont_N_HY_mal, 0.95), quantile(cont_N_AHY_mal, 0.95))
cont.table <- as.data.frame(cbind(Parameter = c("S_FW_AM", "S_SS_AM", "S_FW_AF", "S_SS_AF", "S_FW_JM", "S_SS_JM", "S_FW_JF", "S_SS_JF", "Productivity", "Proportion_JF", "Proportion_AF", "Proportion_JM", "Proportion_AM"), Contribution = as.numeric(cont.means), Lower = as.numeric(cont.lower), Upper = as.numeric(cont.upper)))
cont.table <- cont.table %>%
mutate_at(c('Contribution', "Lower", "Upper"), as.numeric)
return(cont.table)
}
mall.cont.table <- tltre.fun(mall.ipm)
agwt.cont.table <- tltre.fun(agwt.ipm)
# Custom theme
theme_tltre <- function(){ theme(
axis.text = element_text(size = 6),
axis.title = element_text(size = 7),
axis.text.x = element_text(angle = 90, vjust = 0.5),
plot.title = element_text(size=10),
panel.background = element_rect(fill = "white", colour = "white",
linewidth = 1, linetype = "solid"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
axis.line = element_line(colour = "black")
)
}
# Plotting
mall.tltre.plot <- ggplot(mall.cont.table, aes(x = Parameter, y = Contribution)) +
theme_tltre() +
geom_col() +
geom_linerange( aes(x=Parameter, ymin=Lower, ymax=Upper), colour="orange", alpha=0.9, linewidth=1.1)
agwt.tltre.plot <- ggplot(agwt.cont.table, aes(x = Parameter, y = Contribution)) +
theme_tltre() +
geom_col() +
geom_linerange( aes(x=Parameter, ymin=Lower, ymax=Upper), colour="orange", alpha=0.9, linewidth=1.1)
mall.tltre.plot | agwt.tltre.plot
# Combine tables then plot using facet_wrap
cont.table <- data.frame(cbind(Species = rep(c("Mallard", "Green-winged Teal"), each = 13), rbind(mall.cont.table, agwt.cont.table)))
ggplot(cont.table, aes(x = Parameter, y = Contribution)) +
theme(strip.text = element_text(size = 9)) +
theme_tltre() +
geom_col() +
geom_linerange( aes(x=Parameter, ymin=Lower, ymax=Upper), colour="orange", alpha=0.9, linewidth=0.5)+
facet_wrap(~Species, scales = "free_y")
#########################################################################
####### contribution to differences in lambda in successive years #######
#########################################################################
# AGWT
ipm <- agwt.ipm
lambda <- expression(((N_HY_fem + N_AHY_fem)*R*SH.jm*(SN.jm^0.25) + (N_HY_fem + N_AHY_fem)*R*SH.jf*(SN.jf^0.25) + (N_HY_mal + N_AHY_mal)*SH.am*SN.am + (N_HY_fem + N_AHY_fem)*SH.af*SN.af)/(N_HY_fem+N_AHY_fem+N_HY_mal+N_AHY_mal))
D(lambda, "R")
# Compute differences and means of demographic rates and population structure between successive years
n.years <- length(ipm$mean$SH.am)
n.draws <- ipm$mcmc.info$n.samples # Determine number of MCMC draws
draws <- ipm$sims.list # Dig out MCMC samples
diff <- array(NA, dim=c(n.draws, n.years-1, 13))
dimnames(diff)[[3]] <- c("SH.am", "SN.am", "SH.af", "SN.af", "SH.jm", "SN.jm", "SH.jf", "SN.jf", "R", "N_HY_fem", "N_AHY_fem", "N_HY_mal", "N_AHY_mal")
# Function to compute differences over successive time steps
getDiff <- function(x) x[,2:n.years] - x[,1:(n.years-1)]
diff[,,"SH.am"] <- getDiff(draws$SH.am)
diff[,,"SN.am"] <- getDiff(draws$SN.am)
diff[,,"SH.af"] <- getDiff(draws$SH.af)
diff[,,"SN.af"] <- getDiff(draws$SN.af)
diff[,,"SH.jm"] <- getDiff(draws$SH.jm)
diff[,,"SN.jm"] <- getDiff(draws$SN.jm)
diff[,,"SH.jf"] <- getDiff(draws$SH.jf)
diff[,,"SN.jf"] <- getDiff(draws$SN.jf)
diff[,,"R"] <- getDiff(draws$R)
diff[,,"N_HY_fem"] <- getDiff(draws$N_HY_fem)
diff[,,"N_AHY_fem"] <- getDiff(draws$N_AHY_fem)
diff[,,"N_HY_mal"] <- getDiff(draws$N_HY_mal)
diff[,,"N_AHY_mal"] <- getDiff(draws$N_AHY_mal)
diff.lambda <- getDiff(draws$lambda)
mean.diff.lambda <- apply(diff.lambda, 2, mean)
mean.diff.lambda <- mean.diff.lambda %>%
as.data.frame() %>%
mutate(Year = c(1993:2019)) %>%
pivot_longer(!Year, values_to = "lambda")
ggplot(mean.diff.lambda, aes(x = Year, y = lambda)) +
geom_bar(stat = "identity")
# Function to compute means over successive time steps, store them in a list
getMn <- function(x) (x[,2:n.years] + x[,1:(n.years-1)]) / 2
means <- list(SH.am=getMn(draws$SH.am), SN.am=getMn(draws$SN.am), SH.af=getMn(draws$SH.af), SN.af = getMn(draws$SN.af), SH.jm=getMn(draws$SH.jm), SN.jm=getMn(draws$SN.jm), SH.jf=getMn(draws$SH.jf), SN.jf=getMn(draws$SN.jf), R=getMn(draws$R), N_HY_fem = getMn(draws$N_HY_fem), N_AHY_fem = getMn(draws$N_AHY_fem), N_HY_mal = getMn(draws$N_HY_mal), N_AHY_mal = getMn(draws$N_AHY_mal))
# Compute sensitivities
senss <- array(NA, dim=c(n.draws, n.years-1, 13))
dimnames(senss)[[3]] <- c("SH.am", "SN.am", "SH.af", "SN.af", "SH.jm", "SN.jm", "SH.jf", "SN.jf", "R", "N_HY_fem", "N_AHY_fem", "N_HY_mal", "N_AHY_mal")
senss[,,"SH.am"] <- eval(D(lambda, "SH.am"), envir=means)
senss[,,"SN.am"] <- eval(D(lambda, "SN.am"), envir=means)
senss[,,"SH.af"] <- eval(D(lambda, "SH.af"), envir=means)
senss[,,"SN.af"] <- eval(D(lambda, "SN.af"), envir=means)
senss[,,"SH.jm"] <- eval(D(lambda, "SH.jm"), envir=means)
senss[,,"SN.jm"] <- eval(D(lambda, "SN.jm"), envir=means)
senss[,,"SH.jf"] <- eval(D(lambda, "SH.jf"), envir=means)
senss[,,"SN.jf"] <- eval(D(lambda, "SN.jf"), envir=means)
senss[,,"R"] <- eval(D(lambda, "R"), envir=means)
senss[,,"N_HY_fem"] <- eval(D(lambda, "N_HY_fem"), envir=means)
senss[,,"N_AHY_fem"] <- eval(D(lambda, "N_AHY_fem"), envir=means)
senss[,,"N_HY_mal"] <- eval(D(lambda, "N_HY_mal"), envir=means)
senss[,,"N_AHY_mal"] <- eval(D(lambda, "N_AHY_mal"), envir=means)
conts <- diff*senss
ci.conts <- apply(conts, c(2,3), cri)
mean.conts <- apply(conts, c(2,3), mean)
mean.conts <- mean.conts %>%
as.data.frame() %>%
# select(SH.am:R) %>%
mutate(Year = c(1993:2019)) %>%
pivot_longer(!Year, names_to = "Param", values_to = "Contribution")
ggplot(mean.conts, aes(x = Year, y = Contribution, fill = Param))+
geom_bar(stat = "identity") +
scale_fill_brewer(palette = "Paired")
ci.conts.new <- as.data.frame.table(ci.conts)
ci.conts.new <- data.frame(ci.conts.new) %>%
mutate(quants = rep(c('lower', 'upper'), 351),
Year = rep(rep(1993:2019, each = 2), 13)) %>%
rename(Param = Var3) %>%
select(Param, Year, quants, Freq) %>%
# relocate(Parameter, quants) %>%
# pivot_longer(!c(Parameter, quants), names_to = 'year', values_to = 'CI') %>%
pivot_wider(names_from = quants, values_from = Freq)
mean.conts <- full_join(mean.conts, ci.conts.new, by = c("Year" = "Year", "Param" = "Param"))
# Load environmental covariates
envi_cov <- readRDS("data/envi_cov.rda")
# standardize precipitation in southern states
prcp <- (envi_cov$avg_prcp-mean(envi_cov$avg_prcp))/sd(envi_cov$avg_prcp)
# standardize average # of days where max temp below freezing from mid-latitude cities
dx32 <- (envi_cov$avg_dx32_ml-mean(envi_cov$avg_dx32_ml))/sd(envi_cov$avg_dx32_ml)
# May pond count estimates in thousands (1990-2019)
ponds <- c(3508.5, 3200, 3608.9, 3611.7, 5984.8, 6335.4, 7482.2, 7458.2, 4586.9, 6704.3, 3946.9, 4640.4, 2720.0, 5190.1, 3919.6, 5381.2, 6093.9, 7002.7, 4431.4, 6434.0, 6665.0, 8132.2, 5544.0, 6891.7, 7181.2, 6307.7, 5012.5, 6096.0, 5227.4, 4990.3)
# subset ponds to 1992-2019
ponds <- ponds[3:length(ponds)]
ponds.std <- (ponds-mean(ponds))/sd(ponds) # standardize
# subset precip to 1992-2019
prcp.new <- prcp[2:(length(prcp)-1)]
prcp.diff <- prcp.new[2:length(prcp.new)]-prcp.new[1:(length(prcp.new)-1)]
mean.conts.R <- mean.conts[mean.conts$Param == "R",]
# mean.conts.R <- cbind(mean.conts.R, lower = ci.conts[1,,'R'], upper = ci.conts[2,,'R'])
nrow(mean.conts.R)
length(prcp.diff)
mean.conts.R <- cbind(mean.conts.R, Precipitation = prcp.diff)
mean.conts.R <- cbind(mean.conts.R, SN.jf = mean.conts[mean.conts$Param == 'SN.jf',])
pond.diff <- ponds.std[2:length(ponds.std)]-ponds.std[1:(length(ponds.std)-1)]
mean.conts.R <- cbind(mean.conts.R, Ponds = pond.diff)
Rcont.precip <- ggplot(mean.conts.R, aes(x = Precipitation, y = Contribution)) +
# geom_point(aes(x = Precipitation,  y = SN.jf.Contribution)) +
theme_tltre() +
geom_pointrange(aes(x = Precipitation, ymin = lower, ymax = upper)) +
theme(axis.text.x = element_text(angle = 0), axis.text = element_text(size = 16), axis.title = element_text(size = 20)) +
xlab(paste0('Interannual difference in winter ', '\n', 'precipitation in the south')) +
ylab('Contribution of reproduction to population growth') +
annotate("text", x=-3.5, y=1, label= "A", size = 13)
Rcont.ponds <- ggplot(mean.conts.R, aes(x = Ponds, y = Contribution)) +
# geom_point(aes(x = Precipitation,  y = SN.jf.Contribution)) +
theme_tltre() +
geom_pointrange(aes(x = Ponds, ymin = lower, ymax = upper)) +
theme(axis.text.x = element_text(angle = 0), axis.text = element_text(size = 16), axis.title = element_text(size = 20)) +
xlab("Interannual difference in breeding habitat") +
ylab('Contribution of reproduction to population growth') +
annotate("text", x=-2, y=1, label= "B", size = 13)
Rcont.precip | Rcont.ponds
here()
# Prepare packages
list.of.packages <- c("tidyverse", "jagsUI", "coda","parallel","doParallel", "foreach", "here", "MCMCvis", "ggridges", "jagshelper", "GGally", "patchwork", "gridExtra", "ggpubr", "rphylopic", "ggdist")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages)}
lapply(list.of.packages, require, character.only = TRUE)
here9)
here()
d
d
# Prepare packages
list.of.packages <- c("stringr", "reshape2", "lubridate", "tidyverse", "here", "ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages)}
lapply(list.of.packages, require, character.only = TRUE)
# Read in banding (and recovery) data
# Mallard
mall.bandings <- read.csv("raw_dat/GameBirds_MALL_Bandings_1991_2021.csv")
mall.recov <- read.csv("raw_dat/GameBirds_MALL_B1991_R1991_2021.csv")
# Subset birds recovered before 2021
recov <- recov[recov$R.Year<2021,]
# Get rid of events where month is not 1-12
recov <- recov[recov$R.Month<13,]
recov <- recov[recov$B.Month<13,]
# Only retain birds that were "shot"
recov <- recov[recov$How.Obt==1,]
# Get rid of unknown hunting seasons survived
recov <- recov[recov$Hunt..Season.Surv.!=99,]
here()
# Read in banding (and recovery) data
# Mallard
mall.bandings <- read.csv("/raw_dat/GameBirds_MALL_Bandings_1991_2021.csv")
# Read in banding (and recovery) data
# Mallard
mall.bandings <- read.csv("raw_dat/GameBirds_MALL_Bandings_1991_2021.csv")
mall.recov <- read.csv("raw_dat/GameBirds_MALL_B1991_R1991_2021.csv")
# Prepare packages
list.of.packages <- c("tidyverse", "jagsUI", "coda","parallel","doParallel", "foreach", "here", "MCMCvis", "ggridges", "jagshelper", "GGally", "patchwork", "gridExtra", "ggpubr", "rphylopic", "ggdist", "todor")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages)}
lapply(list.of.packages, require, character.only = TRUE)
# Green-winged Teal
AGWT.release <- readRDS(file = "data/AGWT_release_new.rda")
AGWT.marray <- readRDS(file = "data/AGWT_marray_new.rda")
View(AGWT.marray[,,1,1])
# Subset to 1992-2020 for green-winged teal
AGWT.release <- AGWT.release[2:nrow(AGWT.release),,]
AGWT.marray <- AGWT.marray[2:nrow(AGWT.marray), 2:ncol(AGWT.marray),,]
y_esa <- readRDS(file = "data/AGWT_ESA_Bpop.rda")
y_tsa <- readRDS(file = "data/AGWT_TSA_Bpop.rda")
# replace NAs with 0 for y_esa for summing
y_esa[is.na(y_esa)] <- 0
# Add estimates from both survey areas
y_tot <- y_esa + y_tsa
# Subset for year 2005-2020 for mallard
y_tot <- y_tot[15:(length(y_tot)-1)]
y_tot <- y_tot[2:(length(y_tot)-1)]
# Subset for years 1992-2020 for agwt
y_tot <- y_tot[2:(length(y_tot)-1)]
y_tot
y_esa <- readRDS(file = "data/AGWT_ESA_Bpop.rda")
y_tsa <- readRDS(file = "data/AGWT_TSA_Bpop.rda")
# replace NAs with 0 for y_esa for summing
y_esa[is.na(y_esa)] <- 0
# Add estimates from both survey areas
y_tot <- y_esa + y_tsa
# Subset for years 1992-2020 for agwt
y_tot <- y_tot[2:(length(y_tot)-1)]
jf.wing <- readRDS(file = "data/AGWT_juv_female_wing_new.rda")
female.wing <- readRDS(file = "data/AGWT_all_female_wing_new.rda")
View(jf.wing)
# subset to year 1992-2020 for AGWT
jf.wing <- jf.wing[2:nrow(jf.wing),]
female.wing <- female.wing[2:nrow(female.wing),]
# Load environmental covariates
envi_cov <- readRDS("data/envi_cov.rda")
## REVIEW: Please make sure we are aligning env cov years and population parameter years correctly
# standardize precipitation in southern states
prcp <- (envi_cov$avg_prcp-mean(envi_cov$avg_prcp))/sd(envi_cov$avg_prcp)
# standardize average # of days where max temp below freezing from mid-latitude cities
dx32 <- (envi_cov$avg_dx32_ml-mean(envi_cov$avg_dx32_ml))/sd(envi_cov$avg_dx32_ml)
# May pond count estimates in thousands (1992-2019)
ponds <- c(3608.9, 3611.7, 5984.8, 6335.4, 7482.2, 7458.2, 4586.9, 6704.3, 3946.9, 4640.4, 2720.0, 5190.1, 3919.6, 5381.2, 6093.9, 7002.7, 4431.4, 6434.0, 6665.0, 8132.2, 5544.0, 6891.7, 7181.2, 6307.7, 5012.5, 6096.0, 5227.4, 4990.3)
ponds.std <- (ponds-mean(ponds))/sd(ponds) # standardize
nyrs <- dim(AGWT.marray)[1]
nClass <- dim(AGWT.marray)[4]
bugs.data <- list(nyrs=dim(AGWT.marray)[1],
#pre-hunting band-recoveries (calendar year 1992-2020)
recovmat.am = AGWT.marray[,,2,3], recovmat.af = AGWT.marray[,,2,4], recovmat.jm = AGWT.marray[,,2,1], recovmat.jf = AGWT.marray[,,2,2]
#post-hunting band-recoveries (calendar year 1993-2020)
, recovmatP.am = AGWT.marray[2:nyrs,2:(nyrs+1),1,3], recovmatP.af = AGWT.marray[2:nyrs,2:(nyrs+1),1,4], recovmatP.jm = AGWT.marray[2:nyrs,2:(nyrs+1),1,1], recovmatP.jf = AGWT.marray[2:nyrs,2:(nyrs+1),1,2]
#pre-hunting total bandings
, relmat.am = AGWT.release[,2,3], relmat.af = AGWT.release[,2,4], relmat.jm = AGWT.release[,2,1], relmat.jf = AGWT.release[,2,2]
#post-hunting total bandings
, relmatP.am = AGWT.release[2:nyrs,1,3], relmatP.af = AGWT.release[2:nyrs,1,4], relmatP.jm = AGWT.release[2:nyrs,1,1], relmatP.jf = AGWT.release[2:nyrs,1,2]
# wing data
, W.jv = jf.wing$Number, W.tot = female.wing$sum
#Bpop estimates
, y_t = y_tot, begin.esa.year = min(which(y_esa!=0))
# envi cov
, prcp = prcp[2:length(prcp)], dx32 = dx32[2:length(dx32)]
, ponds = c(ponds.std,NA)
# envi cov from previous year
, prev.prcp = prcp[1:length(prcp)-1], prev.dx32 = dx32[1:length(dx32)-1]
)
hist(plogis(rnorm(1000,0, 1.5)))
hist(plogis(rnorm(1000,0, 1)))
# Initial values
inits <- function(){list(f.am=runif(nyrs,0,0.5),f.af=runif(nyrs,0,0.5),f.jm=runif(nyrs,0,0.5),f.jf=runif(nyrs,0,0.5)
, beta = rnorm(1, 0, 1)
# initial pop for agwt
, n_HY_mal = runif(1, 0, 50), n_AHY_mal = runif(1, 0, 50), n_HY_fem = runif(1, 0, 50), n_AHY_fem = runif(1, 0, 50),
muH.am = rnorm(nyrs-1, 0, 1.5), muH.af = rnorm(nyrs-1, 0, 1.5), muH.jm = rnorm(nyrs-1, 0, 1.5), muH.jf = rnorm(nyrs-1, 0, 1.5)
, muN.am = rnorm(nyrs-1, 0, 1.5), muN.af = rnorm(nyrs-1, 0, 1.5), muN.jm = rnorm(nyrs-1, 0, 1.5), muN.jf = rnorm(nyrs-1, 0, 1.5)
# initial pop for mallard
# , n_HY_mal = runif(1, 0, 200), n_AHY_mal = runif(1, 0, 200), n_HY_fem = runif(1, 0, 200), n_AHY_fem = runif(1, 0, 200)
, alpha_prcp = rnorm(4, 0, 1), alpha_dx32 = rnorm(4, 0, 1)
, beta_pond = rnorm(1, 0, 1), beta_prcp = rnorm(1, 0, 1), beta_dx32 = rnorm(1, 0, 1)
# ,gamma_prcp = rnorm(4, 0, 1), gamma_dx32 = rnorm(4, 0, 1)
)}
# Parameters
parameters <- c("SH.am", "SN.am", "SH.af", "SN.af", "SH.jm", "SN.jm", "SH.jf", "SN.jf"
, "S.am", "S.af", "S.jm", "S.jf", "f.am", "f.af", "f.jm", "f.jf"
,"R", "sd.R", "v", "q"
, "N_tot", "N_HY_fem", "N_AHY_fem", "N_HY_mal", "N_AHY_mal", "sig.t", "beta", "delta", "lambda"
, "muH.am", "muH.af", "muH.jm", "muH.jf", "muN.am", "muN.af", "muN.jm", "muN.jf"
, "alpha_prcp", "gamma_prcp"
, "alpha_dx32", "gamma_dx32"
,"beta_pond", "beta_prcp", "beta_dx32"
)
# MCMC settings
ni <- 50000
nt <- 1
nb <- 25000
nc <- 3
na <- 1000
## AGWT
agwt.ipm <- jagsUI(bugs.data, inits=inits, parameters, "mall_agwt_ipm_clean.jags", n.adapt = na, n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb, parallel=TRUE, store.data=TRUE)
y_esa <- readRDS(file = "data/AGWT_ESA_Bpop.rda")
y_tsa <- readRDS(file = "data/AGWT_TSA_Bpop.rda")
y_esa
y_tsa
# Bpop estimates (divided by 10,000) years 1991-2021
y_esa <- readRDS(file = "data/MALL_ESA_Bpop.rda") # Eastern survey area
y_tsa <- readRDS(file = "data/MALL_TSA_Bpop.rda") # Traditional survey area
y_esa
